#!/usr/bin/env python3

### NEMS SaaS Communications Agent v1.0
### By Robbie Ferguson // https://nemslinux.com/

### Make sure needed modules are installed before proceeding
import pip
try:
  __import__("psutil")
except ImportError:
  pip.main(["install", "psutil"])
try:
  __import__("requests")
except ImportError:
  pip.main(["install", "requests"])
#try:
#  __import__("nvidia_smi")
#except ImportError:
#  pip.main(["install", "nvidia-ml-py3"])
#try:
#  __import__("GPUtil")
#except ImportError:
#  pip.main(["install", "GPUtil"])

### Go ahead with the program
import os, sys, psutil, platform, socket, json, logging, configparser, requests, uuid
from time import sleep
# import GPUtil

data = {}

### Do some OS-specific stuff
if os.name == "nt":
  configfileLoc = os.path.expandvars("%systemdrive%\\etc\\nems-saas.ini")
else:
  configfileLoc = "/etc/nems-saas.ini"

### Setup Account Info
def read_config():
  config = configparser.ConfigParser()
  config.read(configfileLoc)
  return config

api = None
message = None
while api is None:
  try:
    config = read_config()
    key = config["nems-saas"]["key"]
    api = "https://api-saas.nemslinux.com/receive/" + key
  except:
    while message is None:
      message = "nems-saas-config is not installed. Please install it now."
      print(message)
    sleep(60)

### Load the device's HWID, or create a new one if it doesn't exist
try:
  data["hwid"] = config["nems-saas"]["hwid"]
except:
  config.set('nems-saas','hwid',str(uuid.uuid4()))
  with open(configfileLoc, 'w') as configfile:
    config.write(configfile)
    data["hwid"] = config["nems-saas"]["hwid"]

data['hostname'] = socket.gethostname()

def get_size(bytes, suffix="B"):
  """
  Scale bytes to its proper format
  e.g:
      1253656 => '1.20MB'
      1253656678 => '1.17GB'
  """
  factor = 1024
  for unit in ["", "K", "M", "G", "T", "P"]:
    if bytes < factor:
      return f"{bytes:.2f}{unit}{suffix}"
  bytes /= factor

def getSystemInfo():
  try:
    ### Operating System
    def linux_distribution():
      try:
        return platform.linux_distribution()
      except:
        return ""

    data["os"] = {}
    data["os"]["platform"] = platform.system()
    data["os"]["architecture"] = platform.architecture()
    data["os"]["release"] = platform.release()
    data["os"]["version"] = platform.version()
    data["os"]["machine"] = platform.machine()
    data["os"]["mac_ver"] = platform.mac_ver()

    ### Load Average
    #load1, load5, load15 = os.getloadavg()
    load1, load5, load15 = psutil.getloadavg()
    data["cpu"] = {}
    data["cpu"]["cores"] = {"physical": psutil.cpu_count(logical=False),"total": psutil.cpu_count(logical=True)}
    cpufreq = psutil.cpu_freq()
    data["cpu"]["frequency"] = {"min": cpufreq.min,"max": cpufreq.max,"current": cpufreq.current}
    data["cpu"]["load"] = {}
    data["cpu"]["load"][1] = load1
    data["cpu"]["load"][5] = load5
    data["cpu"]["load"][15] = load15
    data["cpu"]["usage"] = {}
    data["cpu"]["usage"]["total"] = psutil.cpu_percent(percpu=False, interval=1)
    data["cpu"]["usage"]["cores"] = {}
    for i, percentage in enumerate(psutil.cpu_percent(percpu=True, interval=1)):
      data["cpu"]["usage"]["cores"][i] = percentage

    ### Disk Usage
    disks = psutil.disk_partitions()

    for x in disks:
      # Partition Information
      data["disks"] = {}
      data["disks"][x.mountpoint] = {}
      data["disks"][x.mountpoint]["device"] = {"disk": x.device,"mountpoint": x.mountpoint}
      # Disk Usage
      try:
        du = psutil.disk_usage(x.mountpoint)
        data["disks"][x.mountpoint]["usage"] = {}
        data["disks"][x.mountpoint]["usage"] = {"total": du.total,"used": du.used,"free": du.free,"percent":du.percent}
        data["disks"][x.mountpoint]["offline"] = 0
      except:
        data["disks"][x.mountpoint]["offline"] = 1

    ### Memory
    mem = psutil.virtual_memory()
    data["memory"] = {}
    data["memory"] = {"total": mem.total,"available": mem.available,"percent": mem.percent}

    ### Network
    data["network"] = {}

    # IO statistics since boot
    net_io = psutil.net_io_counters()
    data["network"]["packets"] = {"sent": net_io.bytes_sent, "received": net_io.bytes_recv}

    # NICs
    if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in if_addrs.items():
      data["network"][interface_name] = {}
      for address in interface_addresses:
        if str(address.family) == 'AddressFamily.AF_INET':
          data["network"][interface_name] = {"ip": address.address,"netmask": address.netmask,"broadcast": address.broadcast}
        elif str(address.family) == 'AddressFamily.AF_PACKET':
          data["network"][interface_name]["mac"] = address.address

    # GPUs
    ## NVIDIA
#    try:
#      data["gpu"] = {}
#      GPUs = GPUtil.getGPUs()
#      data["gpu"]["load"] = round(float(GPUs[0].load*100),2)
#      data["gpu"]["memory"] = round(float(GPUs[0].memoryUtil*100),2)
#    except:
#      data["gpu"] = {}

    #return json.dumps(data, sort_keys=False, indent=4)
    return data

  except Exception as e:
    logging.exception(e)

while True:
  try:
    # Sending the payload as a POST packet over SSL connection
    payload = {"json": json.dumps(getSystemInfo())}
    headers = {'content-type': 'application/x-www-form-urlencoded', 'Accept-Charset': 'UTF-8'}
    response = requests.post(api, data=payload, headers=headers, timeout=240, verify=True)
    # Sleep if successfully sent payload
    # The sleep time is determined by the remote API, which allows the central server to control throttling
    if response.ok == True:
      # Send a packet based on the sleep timer. This helps scatter requests to reduce the impact on the performance of our SaaS server.
      timer = int(response.text)
      print("Packet sent.")
      if timer == 10000:
        print("Invalid Account Key.")
      elif timer == 10001:
        print("Invalid HWID.")
      else:
        print("Sleeping for " + str(timer) + " seconds.")
      sleep(timer)
    # Retry every 30 seconds if failed to send payload
    else:
      print("Packet failed: " + response.reason)
      print("Will try again.")
      sleep(30)
  except requests.ConnectionError:
    print("Could not connect to NEMS SaaS API. Will try again later.")
  except KeyboardInterrupt: # Catch CTRL-C during loop
    print()
    sys.exit("Exiting.")
